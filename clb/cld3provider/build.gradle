buildscript {
    ext {
        gradleRootDir = "${rootProject.getRootDir()}/gradle"
    }

    apply from: "$gradleRootDir/repositories.gradle"
    apply from: "$gradleRootDir/dependencies.gradle"
    apply from: "$gradleRootDir/jni.gradle"

    dependencies {
        classpath libraries.javacpp
    }
}

plugins {
    id 'java-library'
    id 'maven-publish'
}

ext {
    nativeProviderPrj = project(':jniCldProviderLib')
    nativeProviderLibDir = "${nativeProviderPrj.buildDir}/lib/main/release"
    nativeProviderBuildTasks = nativeProviderPrj.getTasksByName('assembleRelease', false)
}

apply from: "$gradleRootDir/repositories.gradle"
apply from: "$gradleRootDir/dependencies.gradle"
apply from: "$gradleRootDir/junit.gradle"
apply from: "$gradleRootDir/native.gradle"

dependencies {
    api             libraries.javacpp

    testCompile     libraries.junit_jupiter
    testCompile     libraries.assertj_core
}

def providerLibClassName = 'cld3.CldProviderLib'

// called by jni ProviderLib
task generateJavacpp(dependsOn: compileJava) {
    ext.headerDir = javacppGenFile
    ext.sourceDir = javacppGenFile
    doLast {
        new org.bytedeco.javacpp.tools.Builder()
            .classPaths(compileJava.destinationDir.toString())
            .classesOrPackages(providerLibClassName)
            .outputDirectory(javacppGenDir)
            .deleteJniFiles(false)
            .compile(false)
            .build() // returns the array of produced files
    }
}

test {
    dependsOn nativeProviderBuildTasks

    def testJavaCP = [ nativeProviderLibDir ].join(File.pathSeparator)

    systemProperty 'org.bytedeco.javacpp.logger.debug', 'true'
    systemProperty 'java.library.path', testJavaCP
    environment = [ 'LD_LIBRARY_PATH' : testJavaCP ]
}

jar {
    dependsOn nativeProviderBuildTasks
    from (nativeProviderLibDir) {
        into "cld3/$javacppOsName-x86_64"
        include "*$sharedLibSuffix"
    }
    archiveAppendix = javacppOsName
}

publishing {
    publications {
        provider(MavenPublication) {
            from components.java
            groupId 'clarabridge'
            artifactId "${project.name}-$javacppOsName" // default - project.name
            //version version // project.version, semver
        }
    }
    repositories {
        maven {
            url project.'nexus.repo.publish'
            credentials {
                username = project.'nexus.deploy.user'
                password = project.'nexus.deploy.password'
            }
        }
    }
}
